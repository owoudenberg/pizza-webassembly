// Generated by `wit-bindgen` 0.19.1. DO NOT EDIT!
using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Diagnostics;

namespace MarkdownWorld.wit.exports.pizza4dotnet.example.v0_1_0
{
    public static class ConverterInterop {
        
        [UnmanagedCallersOnly(EntryPoint = "pizza4dotnet:example/converter@0.1.0#to-html")]
        public static int wasmExportToHtml(int p0, int p1) {
            var ret = ConverterImpl.ToHtml((returnArea.GetUTF8String(p0, p1)));
            
            var ptr = returnArea.AddrOfBuffer();
            
            var result = ret;
            IntPtr interopString = InteropString.FromString(result, out int lengthresult);
            returnArea.SetS32(4, lengthresult);
            returnArea.SetS32(0, interopString.ToInt32());
            return ptr;
            
        }
        
        [UnmanagedCallersOnly(EntryPoint = "cabi_post_pizza4dotnet:example/converter@0.1.0#to-html")]
        public static void cabi_post_wasmExportToHtml(int returnValue) {
            Console.WriteLine("cabi_post_pizza4dotnet:example/converter@0.1.0#to-html");
        }
        
        [InlineArray(8)]
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        private struct ReturnArea
        {
            private byte buffer;
            
            private int GetS32(int offset)
            {
                ReadOnlySpan<byte> span = MemoryMarshal.CreateSpan(ref buffer, 8);
                
                return BitConverter.ToInt32(span.Slice(offset, 4));
            }
            
            public void SetS8(int offset, int value)
            {
                Span<byte> span = MemoryMarshal.CreateSpan(ref buffer, 8);
                
                BitConverter.TryWriteBytes(span.Slice(offset), value);
            }
            
            public void SetS16(int offset, short value)
            {
                Span<byte> span = MemoryMarshal.CreateSpan(ref buffer, 8);
                
                BitConverter.TryWriteBytes(span.Slice(offset), value);
            }
            
            public void SetS32(int offset, int value)
            {
                Span<byte> span = MemoryMarshal.CreateSpan(ref buffer, 8);
                
                BitConverter.TryWriteBytes(span.Slice(offset), value);
            }
            
            public void SetF32(int offset, float value)
            {
                Span<byte> span = this;
                
                BitConverter.TryWriteBytes(span.Slice(offset), value);
            }
            
            internal unsafe int AddrOfBuffer()
            {
                fixed(byte* ptr = &buffer)
                {
                    return (int)ptr;
                }
            }
            
            public unsafe string GetUTF8String(int p0, int p1)
            {
                return Encoding.UTF8.GetString((byte*)p0, p1);
            }
        }
        
        [ThreadStatic]
        private static ReturnArea returnArea = default;
        
    }
}

